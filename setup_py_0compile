#!/usr/bin/env python
import os, sys, subprocess, shutil, glob, stat
import logging
def check_call(cmd, *a, **k):
	logging.info("Running: %r" % (cmd,))
	return subprocess.check_call(cmd, *a, **k)

logging.basicConfig(level=logging.DEBUG)
os.chdir(os.environ['BUILDDIR'])
for root, dirs, files in os.walk(os.environ['BUILDDIR']):
	for f in list(files) + list(dirs):
		path = os.path.join(root, f)
		current_mode = os.stat(path).st_mode
		os.chmod(path, current_mode | stat.S_IWUSR) # writeable by user

# Some (horrible) versions of setuptools check that the destination is on PYTHONPATH,
# and doesn't allow us to skip this check.
# So we put it in, even though it's completely useless
pythonpath = os.environ.get('PYTHONPATH', None).split(os.pathsep)
version_info = sys.version_info[:2]

# this is for unix. windows might be different:
expected_lib_path = os.path.join(os.environ['DISTDIR'], 'lib','python%s.%s' % (version_info), 'site-packages')
pythonpath.append(expected_lib_path)
if not os.path.exists(expected_lib_path): os.makedirs(expected_lib_path)
# print("pythonpath set to: %r" % (pythonpath), file=sys.stderr)
os.environ['ROOT'] = expected_lib_path
os.environ['PYTHONPATH'] = os.pathsep.join(pythonpath)

help_text = subprocess.check_output([sys.executable, 'setup.py', '--help', 'install'], stderr=subprocess.STDOUT).decode('ASCII', 'ignore')
# sys.stdout.write(help_text)
if 'single-version-externally-managed' in help_text:
	check_call([sys.executable, 'setup.py', '-v', 'install', '--root', os.environ['DISTDIR'], '--single-version-externally-managed'])
else:
	assert 'install-layout' in help_text, help_text
	check_call([sys.executable, 'setup.py', '-v', 'install', '--prefix', os.environ['DISTDIR'], '--install-layout=deb'])
os.chdir(os.environ['DISTDIR'])

python_dir = (
		glob.glob('lib/python*/site-packages')
		+ glob.glob("usr/lib*/python*/site-packages")
	)
python_dir = list(filter(lambda d: len(os.listdir(d)) > 0, python_dir)) # nonempty dirs
assert len(python_dir) == 1, "Expected 1 python dir, got: %r" % (repr(python_dir),)
python_dir = python_dir[0]
for content in os.listdir(python_dir):
	shutil.move(os.path.join(python_dir, content), os.path.join('lib', content))
shutil.rmtree(os.path.dirname(python_dir))

if os.path.exists('usr/bin') and not os.path.exists('bin'):
	shutil.move('usr/bin', 'bin')

ENTRY_POINTS = 'entry_points.txt'
for root, dirs, files in os.walk(os.environ['DISTDIR']):
	if 'egg-info' in root and ENTRY_POINTS in files:
		check_call(['python-genscripts', '-i', os.path.join(root, ENTRY_POINTS), '-d', 'bin'])
